from django.shortcuts import get_object_or_404from rest_framework import viewsets, status, permissionsfrom rest_framework.permissions import BasePermissionfrom rest_framework.response import Responsefrom posts.models import User, Post, Commentfrom .serializers import UserSerializers, PostSerializers, CommentSerializersclass OwnResourcePermission(BasePermission):    def has_object_permission(self, request, view, obj):        if request.method in permissions.SAFE.METHOD:            return request.user == obj.author        return Trueclass UserViewSet(viewsets.ModelViewSet):    queryset = User.objects.all()    serializer_class = UserSerializers    permission_classes = [OwnResourcePermission]    def list(self, request):        serializer = self.serializer_class(self.queryset, many=True)        return Response(serializer.data)class PostViewSet(viewsets.ModelViewSet):    queryset = Post.objects.all()    serializer_class = PostSerializers    permission_classes = [OwnResourcePermission]    def perform_create(self, serializer):        serializer.save(author=self.request.user)    def list(self, request):        serializer = self.serializer_class(self.queryset, many=True)        return Response(serializer.data)    def create(self, request):        serializer = self.serializer_class(data=request.data)        if serializer.is_valid():            serializer.save(author=self.request.user)            return Response(serializer.data, status=status.HTTP_201_CREATED)        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)    def partial_update(self, request, pk):        post = get_object_or_404(self.queryset, pk=pk)        if request.user == post.author:            serializer = self.serializer_class(post, data=request.data, partial=True)            if serializer.is_valid():                serializer.save()                return Response(serializer.data)            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)        else:            return Response(status=status.HTTP_403_FORBIDDEN)    def destroy(self, request, pk):        post = get_object_or_404(self.queryset, pk=pk)        post.delete()        return Response(status=status.HTTP_204_NO_CONTENT)class CommentViewSet(viewsets.ModelViewSet):    queryset_post = Post.objects.all()    queryset = Comment.objects.all()    serializer_class = CommentSerializers    serializer_class_post = PostSerializers    permission_classes = [OwnResourcePermission]    def list(self, request, pk, comment_pk=None):        post = get_object_or_404(self.queryset_post, pk=pk)        if comment_pk is not None:            comment = get_object_or_404(self.queryset, post=post, pk=comment_pk)            serializer = self.serializer_class(comment, many=False)            return Response(serializer.data)        else:            comments = post.comments            serializer = self.serializer_class(comments, many=True)            return Response(serializer.data)    def create(self, request, pk):        post = get_object_or_404(self.queryset_post, pk=pk)        serializer = self.serializer_class(data=request.data)        if serializer.is_valid():            serializer.save(author=self.request.user, post=post)            return Response(serializer.data, status=status.HTTP_201_CREATED)        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)    def update(self, request, pk, comment_pk):        post = get_object_or_404(self.queryset_post, pk=pk)        comment = get_object_or_404(self.queryset, post=post, pk=comment_pk)        if request.user == comment.author:            serializer = self.serializer_class(comment, data=request.data, partial=True)            if serializer.is_valid():                serializer.save()                return Response(serializer.data)            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)        else:            return Response(status=status.HTTP_403_FORBIDDEN)    def destroy(self, request, pk, comment_pk):        post = get_object_or_404(self.queryset_post, pk=pk)        comment = get_object_or_404(self.queryset, post=post, pk=comment_pk)        if request.user == comment.author:            comment.delete()            return Response(status=status.HTTP_204_NO_CONTENT)        else:            return Response(status=status.HTTP_403_FORBIDDEN)